<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Smart Contract GUI</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/web3@1.8.0/dist/web3.min.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/@babel/standalone@7.22.5/babel.min.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
  <style>
    .tooltip { display: none; position: absolute; z-index: 10; background-color: #1f2937; color: #ffffff; padding: 8px 12px; border-radius: 4px; font-size: 0.875rem; white-space: normal; max-width: 200px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); top: 100%; left: 50%; transform: translateX(-50%); }
    .group:hover .tooltip { display: block; }
    .accordion-item { border-bottom: 1px solid #4b5563; }
    .accordion-item button { width: 100%; padding: 1rem; text-align: left; background: none; border: none; color: #facc15; font-weight: 600; cursor: pointer; }
    .accordion-item button:hover { background-color: #374151; }
    .accordion-content { display: none; padding: 1rem; color: #d1d5db; }
    .accordion-item.active .accordion-content { display: block; }
    .source-link { display: block; margin-bottom: 0.5rem; color: #facc15; text-decoration: underline; }
    .source-link:hover { color: #fde047; }
    .gnome { position: absolute; width: 10px; height: 16px; z-index: 20; transition: all 0.3s ease; }
    .red-gnome { background: radial-gradient(circle at 50% 20%, red 0%, darkred 70%); border-radius: 50% 50% 0 0; }
    .green-gnome { background: radial-gradient(circle at 50% 20%, green 0%, darkgreen 70%); border-radius: 50% 50% 0 0; }
    .gnome .cap { position: absolute; top: -3px; left: 50%; transform: translateX(-50%); width: 6px; height: 4px; background: #ff4500; border-radius: 50% 50% 0 0; }
    .gnome .beard { position: absolute; top: 50%; left: 30%; width: 4px; height: 4px; background: #d3d3d3; border-radius: 50%; }
    .gnome .eyes { position: absolute; top: 30%; left: 20%; width: 2px; height: 2px; background: black; border-radius: 50%; }
    .gnome .eyes::after { content: ''; position: absolute; right: -2px; width: 2px; height: 2px; background: black; border-radius: 50%; }
    .gnome .nose { position: absolute; top: 40%; left: 40%; width: 2px; height: 2px; background: #ffa500; border-radius: 50%; }
    .gnome .legs { position: absolute; bottom: -4px; left: 20%; width: 2px; height: 4px; background: #8b4513; }
    .gnome .legs::after { content: ''; position: absolute; right: -2px; width: 2px; height: 4px; background: #8b4513; }
    .gnome .arms { position: absolute; top: 50%; left: 10%; width: 1px; height: 4px; background: #d2b48c; transform: rotate(30deg); }
    .gnome .arms::after { content: ''; position: absolute; right: -1px; width: 1px; height: 4px; background: #d2b48c; transform: rotate(-30deg); }
    .window { position: absolute; width: 200px; height: 150px; border: 2px solid gray; background: lightgray; z-index: 10; }
  </style>
</head>
<body class="bg-gray-900 text-gray-200 font-mono transition-colors duration-300">
  <div id="root"></div>
  <div class="window" style="top: 50px; left: 50px;"></div>
  <div class="gnome red-gnome" id="gnome1"><div class="cap"></div><div class="beard"></div><div class="eyes"></div><div class="nose"></div><div class="legs"></div><div class="arms"></div></div>
  <div class="gnome green-gnome" id="gnome2"><div class="cap"></div><div class="beard"></div><div class="eyes"></div><div class="nose"></div><div class="legs"></div><div class="arms"></div></div>

  <script type="text/babel">
    const { useState, useEffect } = React;

    const translations = {
      en: { /* ... (existing translations remain unchanged) ... */ },
      pl: { /* ... (existing translations remain unchanged) ... */ }
    };

    const advancedSources = { /* ... (existing sources remain unchanged) ... */ };
    const glossaryContent = { /* ... (existing glossary remains unchanged) ... */ };
    const functionDescriptions = { /* ... (existing descriptions remain unchanged) ... */ };
    const networks = [ /* ... (existing networks remain unchanged) ... */ ];
    const poolIds = ['0', '1', '2', '3', '4'];

    function App() {
      const [web3, setWeb3] = useState(null);
      const [account, setAccount] = useState(null);
      const [contractAddress, setContractAddress] = useState('');
      const [abi, setAbi] = useState('');
      const [contract, setContract] = useState(null);
      const [functions, setFunctions] = useState([]);
      const [error, setError] = useState('');
      const [results, setResults] = useState({});
      const [isLoading, setIsLoading] = useState(true);
      const [language, setLanguage] = useState('en');
      const [isMobileView, setIsMobileView] = useState(window.innerWidth < 768);
      const [currentNetwork, setCurrentNetwork] = useState(null);
      const [notifications, setNotifications] = useState([]);
      const [networkSearch, setNetworkSearch] = useState('');
      const [theme, setTheme] = useState('dark');
      const [ethValue, setEthValue] = useState('');
      const [weiValue, setWeiValue] = useState('');

      useEffect(() => {
        if (window.ethereum) {
          const web3Instance = new Web3(window.ethereum);
          setWeb3(web3Instance);
          window.ethereum.request({ method: 'eth_requestAccounts' })
            .then(accounts => {
              setAccount(accounts[0]);
              web3Instance.eth.getChainId().then(chainId => {
                setCurrentNetwork(networks.find(n => n.chainId === `0x${parseInt(chainId).toString(16)}`) || { name: 'Unknown Network' });
              });
              setIsLoading(false);
            })
            .catch(err => {
              setError(translations[language].errorNoMetaMask);
              setIsLoading(false);
            });
          window.ethereum.on('accountsChanged', accounts => setAccount(accounts[0]));
          window.ethereum.on('chainChanged', chainId => {
            setCurrentNetwork(networks.find(n => n.chainId === `0x${parseInt(chainId).toString(16)}`) || { name: 'Unknown Network' });
          });
        } else {
          setError(translations[language].errorNoMetaMask);
          setIsLoading(false);
        }
      }, [language]);

      const switchNetwork = async (chainId) => {
        try {
          await window.ethereum.request({
            method: 'wallet_switchEthereumChain',
            params: [{ chainId: chainId }]
          });
          setCurrentNetwork(networks.find(n => n.chainId === chainId));
        } catch (err) {
          setNotifications([...notifications, { id: Date.now(), message: `${translations[language].addNetwork} Chainlist.org: ${err.message}` }]);
        }
      };

      const disconnectWallet = () => {
        setAccount(null);
        setCurrentNetwork(null);
      };

      const loadContract = () => {
        try {
          const abiJson = JSON.parse(abi);
          if (!web3.utils.isAddress(contractAddress)) {
            throw new Error('Invalid contract address');
          }
          const contractInstance = new web3.eth.Contract(abiJson, contractAddress);
          setContract(contractInstance);
          const contractFunctions = abiJson.filter(item => item.type === 'function');
          setFunctions(contractFunctions);
          setError('');
          setResults({});
        } catch (err) {
          setError(translations[language].errorInvalidAbi + err.message);
        }
      };

      const callFunction = async (func, inputs) => {
        try {
          const processedInputs = inputs.map((input, index) => {
            const param = func.inputs[index];
            if (param.type === 'uint256') {
              return web3.utils.toWei(input || '0', 'ether');
            }
            return input;
          });
          const method = contract.methods[func.name](...processedInputs);
          if (func.stateMutability === 'view' || func.stateMutability === 'pure') {
            const result = await method.call({ from: account });
            setResults(prev => ({ ...prev, [func.name]: result.toString() }));
          } else {
            const tx = await method.send({ from: account });
            setResults(prev => ({ ...prev, [func.name]: `Transaction hash: ${tx.transactionHash}` }));
          }
          setError('');
        } catch (err) {
          setNotifications([...notifications, { id: Date.now(), message: translations[language].errorFunctionCall + err.message }]);
        }
      };

      const copyToClipboard = (text) => {
        navigator.clipboard.writeText(text);
        setNotifications([...notifications, { id: Date.now(), message: 'Text copied to clipboard!' }]);
      };

      const filteredNetworks = networks.filter(network =>
        network.name.toLowerCase().includes(networkSearch.toLowerCase()) ||
        network.chainId.toLowerCase().includes(networkSearch.toLowerCase())
      );

      const handleEthChange = (e) => {
        const value = e.target.value;
        setEthValue(value);
        if (value) {
          setWeiValue(web3.utils.toWei(value, 'ether'));
        } else {
          setWeiValue('');
        }
      };

      const handleWeiChange = (e) => {
        const value = e.target.value;
        setWeiValue(value);
        if (value) {
          setEthValue(web3.utils.fromWei(value, 'ether'));
        } else {
          setEthValue('');
        }
      };

      // Gnome movement logic
      useEffect(() => {
        const gnome1 = document.getElementById('gnome1');
        const gnome2 = document.getElementById('gnome2');
        let gnome1X = 100, gnome1Y = 100;
        let gnome2X = 200, gnome2Y = 100;
        let isChasing = false;

        function moveGnome(gnome, x, y) {
          gnome.style.left = x + 'px';
          gnome.style.top = y + 'px';
        }

        function getRandomBehavior() {
          const behaviors = ['climb', 'walk', 'run', 'rest', 'slide', 'smoke', 'laugh', 'angry', 'fastRun', 'chase'];
          return behaviors[Math.floor(Math.random() * behaviors.length)];
        }

        function animateGnomes() {
          const behavior1 = getRandomBehavior();
          const behavior2 = getRandomBehavior();

          // Natural movement boundaries (windows, tables, functions area)
          const windowBounds = document.querySelector('.window').getBoundingClientRect();
          const uiBounds = document.getElementById('root').getBoundingClientRect();
          const maxX = uiBounds.width - 10;
          const maxY = uiBounds.height - 16;

          // Gnome 1 behavior
          if (behavior1 === 'climb' && gnome1Y > windowBounds.top) gnome1Y -= 2;
          if (behavior1 === 'walk') gnome1X += 3;
          if (behavior1 === 'run') gnome1X += 6;
          if (behavior1 === 'fastRun') gnome1X += 12;
          if (behavior1 === 'slide' && gnome1Y < windowBounds.bottom) gnome1Y += 4;
          if (behavior1 === 'rest') { gnome1X += 0; gnome1Y += 0; }
          if (behavior1 === 'smoke') console.log('Red gnome smoking pipe!');
          if (behavior1 === 'angry') console.log('Red gnome is angry!');
          if (behavior1 === 'laugh') console.log('Red gnome is laughing!');

          // Gnome 2 behavior
          if (behavior2 === 'climb' && gnome2Y > windowBounds.top) gnome2Y -= 2;
          if (behavior2 === 'walk') gnome2X += 3;
          if (behavior2 === 'run') gnome2X += 6;
          if (behavior2 === 'fastRun') gnome2X += 12;
          if (behavior2 === 'slide' && gnome2Y < windowBounds.bottom) gnome2Y += 4;
          if (behavior2 === 'rest') { gnome2X += 0; gnome2Y += 0; }
          if (behavior2 === 'smoke') console.log('Green gnome smoking pipe!');
          if (behavior2 === 'angry') console.log('Green gnome is angry!');
          if (behavior2 === 'laugh') console.log('Green gnome is laughing!');

          // Chase interaction
          if (behavior1 === 'chase' || behavior2 === 'chase') {
            isChasing = true;
            if (gnome1X < gnome2X) gnome1X += 8;
            else if (gnome2X < gnome1X) gnome2X += 8;
            console.log('Gnomes are chasing each other!');
          } else if (isChasing && Math.random() > 0.7) {
            console.log('Gnomes laugh together after chasing!');
            isChasing = false;
          }

          // Keep gnomes within UI bounds
          gnome1X = Math.max(0, Math.min(gnome1X, maxX));
          gnome1Y = Math.max(0, Math.min(gnome1Y, maxY));
          gnome2X = Math.max(0, Math.min(gnome2X, maxX));
          gnome2Y = Math.max(0, Math.min(gnome2Y, maxY));

          moveGnome(gnome1, gnome1X, gnome1Y);
          moveGnome(gnome2, gnome2X, gnome2Y);

          requestAnimationFrame(animateGnomes);
        }

        animateGnomes();
      }, []);

      if (isLoading) {
        return <div className="container mx-auto p-4 max-w-4xl"><h1 className="text-3xl font-bold mb-6 text-center text-yellow-400"><i className="fas fa-spinner fa-spin mr-2"></i>{translations[language].loading}</h1><p className="text-center text-gray-400">{translations[language].loading}</p></div>;
      }

      return (
        <div className={`container mx-auto p-4 max-w-4xl ${theme === 'dark' ? 'bg-gray-900 text-gray-200' : theme === 'light' ? 'bg-gray-100 text-gray-900' : theme === 'warm' ? 'bg-yellow-900 text-yellow-200' : 'bg-blue-900 text-blue-200'} transition-colors duration-300`}>
          <header className="mb-8 text-center"><h1 className="text-4xl font-bold text-yellow-400"><i className="fas fa-terminal mr-2"></i>{translations[language].title}</h1></header>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
            <div className="bg-gray-800 p-4 rounded-lg shadow-lg bg-gradient-to-r from-gray-800 to-gray-700 hover:shadow-xl transition-shadow">
              <h2 className="text-lg font-semibold mb-2 text-yellow-400"><i className="fas fa-wallet mr-2"></i>{translations[language].wallet}</h2>
              {!account ? (
                <button className="w-full bg-green-600 text-white px-4 py-2 rounded border border-yellow-600 hover:bg-green-500 hover:border-yellow-400 transition h-10 flex items-center justify-center" onClick={() => window.ethereum.request({ method: 'eth_requestAccounts' })}><i className="fas fa-wallet mr-2"></i>{translations[language].connectWallet}</button>
              ) : (
                <button className="w-full bg-red-600 text-white px-4 py-2 rounded border border-yellow-600 hover:bg-red-500 hover:border-yellow-400 transition h-10 flex items-center justify-center" onClick={disconnectWallet}><i className="fas fa-sign-out-alt mr-2"></i>{translations[language].disconnectWallet}</button>
              )}
            </div>

            <div className="bg-gray-800 p-4 rounded-lg shadow-lg bg-gradient-to-r from-gray-800 to-gray-700 hover:shadow-xl transition-shadow">
              <h2 className="text-lg font-semibold mb-2 text-yellow-400"><i className="fas fa-network-wired mr-2"></i>{translations[language].network}</h2>
              <select className="w-full bg-gray-700 text-gray-200 p-2 rounded border border-yellow-600 hover:border-yellow-400 transition h-10 mb-2" value={currentNetwork?.chainId || ''} onChange={e => switchNetwork(e.target.value)}>
                <option value="">{translations[language].selectNetwork}{currentNetwork ? currentNetwork.name : ''}</option>
                {filteredNetworks.sort((a, b) => a.name.localeCompare(b.name)).map(network => (
                  <option key={network.chainId} value={network.chainId}>{network.name} ({network.isTestnet ? 'Testnet' : 'Mainnet'})</option>
                ))}
              </select>
              <div className="relative w-full"><input type="text" className="w-full p-2 bg-gray-700 border border-yellow-600 rounded focus:outline-none focus:ring-2 focus:ring-green-500 text-gray-200 h-10" placeholder={translations[language].searchNetwork} value={networkSearch} onChange={e => setNetworkSearch(e.target.value)} /><i className="fas fa-search absolute right-3 top-3 text-gray-400"></i></div>
            </div>

            <div className="bg-gray-800 p-4 rounded-lg shadow-lg bg-gradient-to-r from-gray-800 to-gray-700 hover:shadow-xl transition-shadow">
              <h2 className="text-lg font-semibold mb-2 text-yellow-400"><i className="fas fa-cog mr-2"></i>{translations[language].settings}</h2>
              <select className="w-full bg-gray-700 text-gray-200 p-2 rounded border border-yellow-600 hover:border-yellow-400 transition h-10 mb-2" value={language} onChange={e => setLanguage(e.target.value)}><option value="en">English</option><option value="pl">Polski</option></select>
              <select className="w-full bg-gray-700 text-gray-200 p-2 rounded border border-yellow-600 hover:border-yellow-400 transition h-10 mb-2" value={theme} onChange={e => setTheme(e.target.value)}><option value="dark">Dark</option><option value="light">Light</option><option value="warm">Warm</option><option value="cold">Cold</option></select>
              <button className="w-full bg-gray-700 text-gray-200 px-4 py-2 rounded border border-yellow-600 hover:border-yellow-400 transition h-10 flex items-center justify-center" onClick={() => setIsMobileView(!isMobileView)}><i className="fas fa-mobile-alt mr-2"></i>{isMobileView ? translations[language].desktopView : translations[language].mobileView}</button>
            </div>
          </div>

          <div className="mb-6">
            <label className="block text-lg font-medium mb-2 text-yellow-400"><i className="fas fa-calculator mr-2"></i>Token Value Converter</label>
            <div className="grid grid-cols-2 gap-4 mb-4">
              <div><label className="block text-sm font-medium mb-1 text-yellow-400">{translations[language].ethToWei}</label><input type="number" step="0.000000000000000001" className="w-full p-2 bg-gray-800 border border-yellow-600 rounded focus:outline-none focus:ring-2 focus:ring-green-500 text-gray-200 h-10" placeholder="Enter ETH (e.g., 1)" value={ethValue} onChange={handleEthChange} /></div>
              <div><label className="block text-sm font-medium mb-1 text-yellow-400">{translations[language].weiToEth}</label><input type="number" className="w-full p-2 bg-gray-800 border border-yellow-600 rounded focus:outline-none focus:ring-2 focus:ring-green-500 text-gray-200 h-10" placeholder="Wei output" value={weiValue} onChange={handleWeiChange} /></div>
            </div>
          </div>

          <p className="text-lg mb-4 text-center text-gray-400"><i className="fas fa-info-circle mr-2"></i>{translations[language].welcome}</p>
          <p className="text-sm mb-4 text-center text-yellow-500" dangerouslySetInnerHTML={{ __html: translations[language].safetyNote }}></p>

          <div className="mb-6"><label className="block text-lg font-medium mb-2 text-yellow-400"><i className="fas fa-address-card mr-2"></i>{translations[language].contractAddress}</label><input type="text" className="w-full p-2 bg-gray-800 border border-yellow-600 rounded focus:outline-none focus:ring-2 focus:ring-green-500 text-gray-200 h-10" placeholder="0x..." value={contractAddress} onChange={e => setContractAddress(e.target.value)} /></div>
          <div className="mb-6"><label className="block text-lg font-medium mb-2 text-yellow-400"><i className="fas fa-code mr-2"></i>{translations[language].contractAbi}</label><textarea className="w-full p-2 bg-gray-800 border border-yellow-600 rounded focus:outline-none focus:ring-2 focus:ring-green-500 text-gray-200" rows="6" placeholder='[{"type":"function", "name":"functionName", "inputs":[...], ...}]' value={abi} onChange={e => setAbi(e.target.value)} /></div>
          <button className="w-full bg-green-600 text-white px-4 py-2 rounded border border-yellow-600 hover:bg-green-500 hover:border-yellow-400 transition h-10 flex items-center justify-center" onClick={loadContract}><i className="fas fa-download mr-2"></i>{translations[language].loadContract}</button>

          {error && <p className="text-red-500 mt-4 p-3 bg-red-900 rounded flex items-center"><i className="fas fa-exclamation-triangle mr-2"></i>{error}</p>}

          <p className="text-sm text-gray-400 mt-4 mb-2"><i className="fas fa-info-circle mr-2"></i>{translations[language].convertNote}</p>

          <div className={`mt-8 ${isMobileView ? 'space-y-6' : 'grid grid-cols-1 md:grid-cols-2 gap-6'}`}>
            <div className={`p-4 rounded-lg shadow-lg bg-gradient-to-r ${theme === 'dark' ? 'from-green-900 to-green-800' : theme === 'light' ? 'from-green-200 to-green-100' : theme === 'warm' ? 'from-yellow-700 to-orange-700' : 'from-blue-700 to-cyan-700'} hover:shadow-xl transition-shadow`}>
              <h2 className="text-xl font-bold mb-4 flex items-center"><i className="fas fa-shield-alt mr-2"></i>{translations[language].readContract}</h2>
              {functions.filter(func => func.stateMutability === 'view' || func.stateMutability === 'pure').map((func, index) => (
                <FunctionForm key={index} func={func} callFunction={callFunction} result={results[func.name]} web3={web3} language={language} isMobileView={isMobileView} setNotifications={setNotifications} theme={theme} />
              ))}
            </div>
            <div className={`p-4 rounded-lg shadow-lg bg-gradient-to-r ${theme === 'dark' ? 'from-orange-900 to-orange-800' : theme === 'light' ? 'from-orange-200 to-orange-100' : theme === 'warm' ? 'from-red-700 to-yellow-700' : 'from-indigo-700 to-blue-700'} hover:shadow-xl transition-shadow`}>
              <h2 className="text-xl font-bold mb-4 flex items-center"><i className="fas fa-exclamation-triangle mr-2"></i>{translations[language].writeContract}</h2>
              {functions.filter(func => func.stateMutability !== 'view' && func.stateMutability !== 'pure').map((func, index) => (
                <FunctionForm key={index} func={func} callFunction={callFunction} result={results[func.name]} web3={web3} language={language} isMobileView={isMobileView} setNotifications={setNotifications} theme={theme} />
              ))}
            </div>
          </div>

          <div className="mt-8"><h2 className="text-xl font-bold mb-4 flex items-center text-yellow-400"><i className="fas fa-lock mr-2"></i>{translations[language].revokePermissions}</h2><p className="text-sm text-gray-400 mb-4 flex items-center"><i className="fas fa-info-circle mr-2"></i>{translations[language].noPermissions}</p><p className="text-sm text-center text-yellow-500 mt-4" dangerouslySetInnerHTML={{ __html: translations[language].disclaimer }}></p></div>

          <div className="fixed bottom-0 left-0 right-0 space-y-2 p-4"><div>{notifications.map(notification => (<div key={notification.id} className="bg-red-900 text-red-200 p-3 rounded flex justify-between items-center max-w-4xl mx-auto shadow-lg hover:shadow-xl transition-shadow"><span>{notification.message}</span><div className="flex space-x-2"><button className="text-yellow-400 hover:text-yellow-200" onClick={() => copyToClipboard(notification.message)}><i className="fas fa-copy"></i> {translations[language].copy}</button><button className="text-yellow-400 hover:text-yellow-200" onClick={() => setNotifications(notifications.filter(n => n.id !== notification.id))}><i className="fas fa-times"></i></button></div></div>))}</div></div>

          <div className="mt-12"><h2 className="text-2xl font-bold mb-6 text-yellow-400 flex items-center"><i className="fas fa-book mr-2"></i>{translations[language].glossary}</h2>{Object.keys(glossaryContent).map((key, index) => (<div key={index} className="accordion-item"><button className="text-lg" onClick={() => {const content = document.querySelectorAll('.accordion-content')[index]; content.style.display = content.style.display === 'block' ? 'none' : 'block'; content.parentElement.classList.toggle('active');}}>{translations[language][key]}</button><div className="accordion-content">{glossaryContent[key][language]}</div></div>))}</div>

          <div className="mt-12"><h2 className="text-2xl font-bold mb-6 text-yellow-400 flex items-center"><i className="fas fa-graduation-cap mr-2"></i>{translations[language].advancedSources}</h2>{Object.entries(advancedSources[language]).map(([key, { url, description }]) => (<a key={key} href={url} target="_blank" rel="noopener noreferrer" className="source-link">{description}</a>))}</div>
        </div>
      );
    }

    function FunctionForm({ func, callFunction, result, web3, language, isMobileView, setNotifications, theme }) {
      const [inputs, setInputs] = useState({});
      const handleInputChange = (name, value) => setInputs(prev => ({ ...prev, [name]: value }));
      const convertToWei = (name, value) => { if (value && web3.utils.isHexStrict(value)) return value; setInputs(prev => ({ ...prev, [name]: web3.utils.toWei(value || '0', 'ether') })); };
      const handleSubmit = () => { const inputValues = func.inputs.map(input => inputs[input.name] || ''); callFunction(func, inputValues); };
      return (<div className={`p-4 bg-${theme === 'dark' ? 'gray-800' : theme === 'light' ? 'gray-200' : theme === 'warm' ? 'yellow-800' : 'blue-800'} border border-yellow-600 rounded-lg shadow-lg mb-4 bg-gradient-to-r ${theme === 'dark' ? 'from-gray-800 to-gray-700' : theme === 'light' ? 'from-gray-200 to-gray-100' : theme === 'warm' ? 'from-yellow-700 to-orange-700' : 'from-blue-700 to-cyan-700'} hover:shadow-xl transition-shadow'><h2 className="text-lg font-semibold mb-2 text-yellow-400 flex items-center"><i className="fas fa-cog mr-2"></i>{func.name}</h2><p className="text-sm text-gray-400 mb-2 flex items-center"><i className="fas fa-info-circle mr-2"></i>{func.stateMutability === 'view' || func.stateMutability === 'pure' ? translations[language].readContract : translations[language].writeContract}</p><p className="text-sm text-gray-200 mb-2 bg-green-900 p-3 rounded flex items-center"><i className="fas fa-user-graduate mr-2"></i>{translations[language].assistant}{functionDescriptions[func.name]?.description[language] || (language === 'en' ? 'Custom function. Follow contract documentation.' : 'Funkcja niestandardowa. Postępuj zgodnie z dokumentacją kontraktu.')}</p><p className="text-sm text-yellow-500 mb-4 flex items-center"><i className="fas fa-exclamation-triangle mr-2"></i>{functionDescriptions[func.name]?.safety[language] || (language === 'en' ? 'Verify function and contract. Check with ScamSniffer and Rabby.io.' : 'Zweryfikuj funkcję i kontrakt. Sprawdź z ScamSniffer i Rabby.io.')}</p>{func.inputs.map((input, index) => (<div key={index} className="mb-3 relative group"><label className="block text-sm font-medium mb-1 text-yellow-400 flex items-center"><i className="fas fa-keyboard mr-2"></i>{input.name} ({input.type})</label><p className="text-xs text-gray-400 mb-1 flex items-center"><i className="fas fa-lightbulb mr-2"></i>{input.type === 'address' && (language === 'en' ? 'Contract address (e.g., swap router, LP token, or token contract).' : 'Adres kontraktu (np. router wymiany, token LP lub kontrakt tokena).')}{input.type === 'uint256' && (language === 'en' ? 'Amount in wei (e.g., for liquidity or token amounts).' : 'Kwota w wei (np. dla płynności lub ilości tokenów).')}{input.type === 'bool' && (language === 'en' ? 'True or false value.' : 'Wartość true lub false.')}{input.type === 'uint8' && (language === 'en' ? 'Small integer (0-255).' : 'Mała liczba całkowita (0-255).')}{input.type === 'bytes32' && (language === 'en' ? '32-byte hexadecimal value.' : 'Wartość szesnastkowa 32 bajtów.')}</p><div className="relative">{input.type === 'address' ? (<input type="text" className={`w-full p-2 bg-${theme === 'dark' ? 'gray-700' : theme === 'light' ? 'gray-200' : theme === 'warm' ? 'yellow-800' : 'blue-800'} border border-yellow-600 rounded focus:outline-none focus:ring-2 focus:ring-green-500 text-${theme === 'dark' || theme === 'warm' || theme === 'cold' ? 'gray-200' : 'gray-900'} h-10`} placeholder={language === 'en' ? 'Enter address' : 'Wprowadź adres'} value={inputs[input.name] || ''} onChange={e => handleInputChange(input.name, e.target.value)} />) : input.type === 'uint256' ? (<div className="flex space-x-2"><input type="number" step="0.000000000000000001" className={`w-full p-2 bg-${theme === 'dark' ? 'gray-700' : theme === 'light' ? 'gray-200' : theme === 'warm' ? 'yellow-800' : 'blue-800'} border border-yellow-600 rounded focus:outline-none focus:ring-2 focus:ring-green-500 text-${theme === 'dark' || theme === 'warm' || theme === 'cold' ? 'gray-200' : 'gray-900'} h-10`} placeholder={language === 'en' ? 'Enter amount (e.g., 1)' : 'Wprowadź kwotę (np. 1)'} onChange={e => handleInputChange(input.name, e.target.value)} value={inputs[input.name] || ''} /><button className="bg-yellow-600 text-gray-900 px-3 py-2 rounded border border-yellow-400 hover:bg-yellow-500 transition h-10 flex items-center" onClick={() => convertToWei(input.name, inputs[input.name])}><i className="fas fa-calculator mr-1"></i>{language === 'en' ? 'To Wei' : 'Na Wei'}</button></div>) : input.type === 'bool' ? (<input type="text" className={`w-full p-2 bg-${theme === 'dark' ? 'gray-700' : theme === 'light' ? 'gray-200' : theme === 'warm' ? 'yellow-800' : 'blue-800'} border border-yellow-600 rounded focus:outline-none focus:ring-2 focus:ring-green-500 text-${theme === 'dark' || theme === 'warm' || theme === 'cold' ? 'gray-200' : 'gray-900'} h-10`} placeholder={language === 'en' ? 'Enter bool' : 'Wprowadź bool'} value={inputs[input.name] || ''} onChange={e => handleInputChange(input.name, e.target.value)} />) : input.type === 'uint8' ? (<input type="number" className={`w-full p-2 bg-${theme === 'dark' ? 'gray-700' : theme === 'light' ? 'gray-200' : theme === 'warm' ? 'yellow-800' : 'blue-800'} border border-yellow-600 rounded focus:outline-none focus:ring-2 focus:ring-green-500 text-${theme === 'dark' || theme === 'warm' || theme === 'cold' ? 'gray-200' : 'gray-900'} h-10`} placeholder={language === 'en' ? 'Enter uint8' : 'Wprowadź uint8'} value={inputs[input.name] || ''} onChange={e => handleInputChange(input.name, e.target.value)} />) : input.type === 'bytes32' ? (<input type="text" className={`w-full p-2 bg-${theme === 'dark' ? 'gray-700' : theme === 'light' ? 'gray-200' : theme === 'warm' ? 'yellow-800' : 'blue-800'} border border-yellow-600 rounded focus:outline-none focus:ring-2 focus:ring-green-500 text-${theme === 'dark' || theme === 'warm' || theme === 'cold' ? 'gray-200' : 'gray-900'} h-10`} placeholder={language === 'en' ? 'Enter bytes32' : 'Wprowadź bytes32'} value={inputs[input.name] || ''} onChange={e => handleInputChange(input.name, e.target.value)} />) : (<input type="text" className={`w-full p-2 bg-${theme === 'dark' ? 'gray-700' : theme === 'light' ? 'gray-200' : theme === 'warm' ? 'yellow-800' : 'blue-800'} border border-yellow-600 rounded focus:outline-none focus:ring-2 focus:ring-green-500 text-${theme === 'dark' || theme === 'warm' || theme === 'cold' ? 'gray-200' : 'gray-900'} h-10`} placeholder={language === 'en' ? `Enter ${input.type}` : `Wprowadź ${input.type}`} value={inputs[input.name] || ''} onChange={e => handleInputChange(input.name, e.target.value)} />)}{functionDescriptions[func.name]?.inputs[input.name] && (<div className="tooltip">{functionDescriptions[func.name].inputs[input.name][language]}</div>)}</div></div>))}<button className="bg-green-600 text-white px-4 py-2 rounded border border-yellow-600 hover:bg-green-500 hover:border-yellow-400 transition h-10 flex items-center justify-center" onClick={handleSubmit}><i className="fas fa-play mr-2"></i>{func.stateMutability === 'view' || func.stateMutability === 'pure' ? (language === 'en' ? 'Call' : 'Wywołaj') : (language === 'en' ? 'Send Transaction' : 'Wyślij transakcję')}</button>{result && (<p className="mt-3 text-sm text-gray-200 break-all flex items-center"><i className="fas fa-check-circle mr-2"></i>{language === 'en' ? 'Result: ' : 'Wynik: '}{result}</p>)}</div>);
    }

    try {
      ReactDOM.render(<App />, document.getElementById('root'));
    } catch (err) {
      console.error('Rendering error:', err);
      document.getElementById('root').innerHTML = `<div style="text-align: center; padding: 20px; color: #f87171;"><h1>Rendering Error</h1><p>${err.message}</p><p>Check the browser console (F12) or ensure all CDN scripts are accessible.</p><p>Ensure you have an internet connection and MetaMask/Rabby installed.</p></div>`;
    }
  </script>
</body>
</html>
