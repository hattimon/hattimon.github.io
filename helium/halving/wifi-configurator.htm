<!DOCTYPE html>
<html lang="pl">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>‚ö° SenseCap M1 - Super Hero Code Master Config ‚ö°</title>
<style>
  body {
    font-family: 'Courier New', monospace;
    background: #0d0d0d;
    color: #00ff88;
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
  }
  h2 {
    text-align: center;
    color: #00ff88;
    text-shadow: 0 0 10px #00ff88, 0 0 20px #00ff88;
  }
  label {
    display: block;
    margin-top: 15px;
    font-weight: bold;
    color: #00ffaa;
    text-shadow: 0 0 5px #00ffaa;
  }
  input[type=text], input[type=password], select {
    width: 100%;
    padding: 8px;
    margin-top: 5px;
    background: #111;
    border: 1px solid #00ffaa;
    color: #00ffaa;
  }
  textarea {
    width: 100%;
    height: 320px;
    margin-top: 15px;
    background: #000;
    color: #00ff88;
    border: 1px solid #00ffaa;
    padding: 10px;
    box-shadow: 0 0 15px #00ff88;
  }
  button {
    margin-top: 15px;
    padding: 10px 20px;
    font-size: 16px;
    background: transparent;
    border: 2px solid #00ff88;
    color: #00ff88;
    cursor: pointer;
    text-shadow: 0 0 5px #00ff88;
    box-shadow: 0 0 10px #00ff88, inset 0 0 10px #00ff88;
    transition: all 0.2s ease-in-out;
  }
  button:hover {
    background: #00ff88;
    color: #000;
    text-shadow: none;
    box-shadow: 0 0 25px #00ff88;
  }
  #musicControl {
    display: block;
    margin: 0 auto 20px auto;
    font-size: 18px;
  }
  #staticIpFields {
    background: rgba(0,255,136,0.05);
    padding: 10px;
    border: 1px dashed #00ff88;
    margin-top: 10px;
  }
</style>
</head>
<body>

<h2>‚ö° SenseCap M1 - Super Hero Code Master ‚ö°</h2>

<button id="musicControl">üéµ Muzyka: ON/OFF</button>

<form id="configForm">
  <label for="mode">Tryb konfiguracji:</label>
  <select id="mode" required>
    <option value="wifi" selected>WiFi</option>
    <option value="ethernet">Tylko Ethernet (wy≈ÇƒÖcz WiFi)</option>
  </select>

  <div id="wifiFields">
    <label for="ssid">Nazwa WiFi (SSID):</label>
    <input type="text" id="ssid" />

    <label for="psk">Has≈Ço do WiFi:</label>
    <input type="password" id="psk" />

    <label for="staticIp">Czy ustawiƒá statyczne IP?</label>
    <select id="staticIp" required>
      <option value="nie" selected>DHCP (auto)</option>
      <option value="tak">Statyczne IP</option>
    </select>

    <div id="staticIpFields" style="display:none;">
      <label for="ip">Statyczny adres IP (np. 192.168.0.245/24):</label>
      <input type="text" id="ip" />

      <label for="gateway">Bramka sieciowa (np. 192.168.0.1):</label>
      <input type="text" id="gateway" />

      <label for="dns">DNS (np. 8.8.8.8):</label>
      <input type="text" id="dns" />
    </div>
  </div>

  <button type="submit">‚öôÔ∏è Generuj skrypt</button>
</form>

<label for="output">üíª Wygenerowany skrypt bash:</label>
<textarea id="output" readonly></textarea>

<audio id="bgMusic" loop autoplay>
  <source src="keygen.mp3" type="audio/mpeg">
</audio>

<script>
  function generateUUID() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      const r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
      return v.toString(16);
    });
  }

  function generateScript(mode, ssid, psk, staticIp, ip, gateway, dns) {
    let script = "#!/bin/bash\n";
    if (mode === "ethernet") {
      script += "# Wy≈ÇƒÖczamy WiFi na zawsze (no mercy!)\n";
      script += "rm -f /mnt/boot/system-connections/wifi.nmconnection\n";
      script += "rm -f /etc/NetworkManager/system-connections/*.nmconnection 2>/dev/null\n";
      script += "nmcli radio wifi off\n";
      script += "systemctl restart NetworkManager\n";
      return script;
    } else {
      script += `cat <<EOF > /mnt/boot/system-connections/wifi.nmconnection
[connection]
id=wifi
uuid=${generateUUID()}
type=wifi
autoconnect=true

[wifi]
ssid=${ssid}
mode=infrastructure

[wifi-security]
key-mgmt=wpa-psk
psk=${psk}

[ipv4]
method=${staticIp ? 'manual' : 'auto'}`;
      if (staticIp) {
        script += `
address1=${ip},${gateway}
dns=${dns || '8.8.8.8'}
dns-search=
`;
      } else {
        script += `\n`;
      }
      script += `[ipv6]
method=ignore
EOF

chmod 600 /mnt/boot/system-connections/wifi.nmconnection
systemctl restart NetworkManager
`;
    }
    return script;
  }

  document.getElementById('staticIp').addEventListener('change', function() {
    document.getElementById('staticIpFields').style.display = this.value === 'tak' ? 'block' : 'none';
  });

  document.getElementById('mode').addEventListener('change', function() {
    document.getElementById('wifiFields').style.display = this.value === 'wifi' ? 'block' : 'none';
  });

  document.getElementById('configForm').addEventListener('submit', function(e) {
    e.preventDefault();
    const mode = document.getElementById('mode').value;
    const ssid = document.getElementById('ssid').value.trim();
    const psk = document.getElementById('psk').value.trim();
    const staticIp = document.getElementById('staticIp').value === 'tak';
    const ip = document.getElementById('ip').value.trim();
    const gateway = document.getElementById('gateway').value.trim();
    const dns = document.getElementById('dns').value.trim();

    if (mode === "wifi" && (!ssid || !psk)) {
      alert('‚ö†Ô∏è Podaj SSID i has≈Ço do WiFi!');
      return;
    }
    if (mode === "wifi" && staticIp && (!ip || !gateway)) {
      alert('‚ö†Ô∏è Podaj IP i bramƒô dla statycznego adresu!');
      return;
    }

    document.getElementById('output').value = generateScript(mode, ssid, psk, staticIp, ip, gateway, dns);
  });

  // Obs≈Çuga muzyki w tle
  const bgMusic = document.getElementById('bgMusic');
  const musicControl = document.getElementById('musicControl');
  musicControl.addEventListener('click', () => {
    if (bgMusic.paused) {
      bgMusic.play();
    } else {
      bgMusic.pause();
    }
  });
</script>

</body>
</html>
